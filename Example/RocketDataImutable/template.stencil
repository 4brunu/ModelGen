//
//  {{ spec.title }}.swift
//  ModelGen
//
//  Generated by [ModelGen]: https://github.com/hebertialmeida/ModelGen
//  Copyright Â© {% now "yyyy" %} ModelGen. All rights reserved.
//

import Unbox
import RocketData

{% if spec.description %}
/// {{ spec.description }}
{% endif %}
public struct {{ spec.title }}: BaseModel, Equatable {

    // MARK: Instance Variables

{% for property in spec.properties %}
{% if property.doc %}
    /**
     {{ property.doc }}
     */
{% endif %}
    public let {{ property.name }}: {{ property.type }}{% if not property.required %}?{% endif %}
{% endfor %}
{% map spec.modifiedProperties into initializerList using property %}"{{ property.name }}": "{{ property.key }}"{% endmap %}
{% if initializerList.count > 0 %}

    public static let propertyMapping: [String: String]? = [
        {{ initializerList|join:", 
        " }}
    ]
{% endif %}

    // MARK: - Initializers

{% map spec.properties into params using property %}{{ property.name }}: {{ property.type }}{% if not property.required %}?{% endif %}{% endmap %}
    public init({{ params|join:", " }}) {
{% for property in spec.properties %}
        self.{{ property.name }} = {{ property.name }}
{% endfor %}
    }

    public init(unboxer: Unboxer) throws {
{% for property in spec.properties %}
{% if property.format == "date" %}
        self.{{ property.name }} = {% if property.required %}try{% endif %} unboxer.unbox(key: "{{ property.key }}", formatter: Date.serverDateFormatter())
{% else %}
        self.{{ property.name }} = {% if property.required %}try{% endif %} unboxer.unbox(key: "{{ property.key }}")
{% endif %}
{% endfor %}
    }

    // MARK: - Rocket Data Model

    public var modelIdentifier: String? {
{% if spec.identifier %}
{% for property in spec.properties %}
{% if property.name == spec.identifier %}
        return "{{ spec.title }}:\({{ property.name }})"
{% endif %}
{% endfor %}
{% else %}
        return nil
{% endif %}
    }

    public func map(_ transform: (Model) -> Model?) -> {{ spec.title }}? {
{% if nestedObjects %}
{% for property in spec.properties where property.nestedObject %}
{% if property.array %}
        let {{ property.name }} = self.{{ property.name }}.flatMap { model in
          return transform(model) as? {{ property.refType }}
        }

{% else %}
{% if property.required %}
        guard let {{ property.name }} = transform(self.{{ property.name }}) as? {{ property.type }} else { return nil }

{% endif %}
{% endif %}
{% endfor %}
{% map spec.properties into initializerList using property %}{{ property.name }}: {{ property.name }}{% endmap %}
        return {{spec.title}}({{ initializerList|join:", " }})
{% else %}
        return self
{% endif %}
    }

    public func forEach(_ visit: (Model) -> Void) {
{% for property in spec.properties where property.nestedObject %}
{% if not property.required %}
        if let {{ property.name }} = {{ property.name }} {
{% endif %}
{% if property.array %}
        {% if not property.required %}  {% endif %}{{ property.name }}.forEach(visit)
{% else %}
        {% if not property.required %}  {% endif %}visit({{ property.name }})
{% endif %}
{% if not property.required %}
        }
{% endif %}
{% endfor %}
    }

    // MARK: - Builder

    public struct Builder {
{% for property in spec.properties %}
        public var {{ property.name }}: {{ property.type }}{% if not property.required %}?{% endif %}
{% endfor %}

        public init(copy: {{spec.title}}) {
{% for property in spec.properties %}
            {{property.name}} = copy.{{property.name}}
{% endfor %}
        }

{% map spec.properties into initializerList using property %}{{ property.name }}: {{ property.name }}{% endmap %}
        public func build() -> {{spec.title}} {
            return {{spec.title}}({{ initializerList|join:", " }})
        }
    }
}

// MARK: - Equatable

public func == (lhs: {{spec.title}}, rhs: {{spec.title}}) -> Bool {
{% for property in spec.properties %}
    guard lhs.{{property.name}} == rhs.{{property.name}} else { return false }
{% endfor %}
    return true
}