//
//  {{ spec.title }}.swift
//  ModelGen
//
//  Generated by [ModelGen]: https://github.com/hebertialmeida/ModelGen
//  Copyright Â© {% now "yyyy" %} ModelGen. All rights reserved.
//

import Unbox

{% if spec.description %}
/// {{ spec.description }}
{% endif %}
public class {{ spec.title }}: Equatable {

    // MARK: Instance Variables

{% for property in spec.properties %}
{% if property.doc %}
    /**
     {{ property.doc }}
     */
{% endif %}
    public var {{ property.name }}: {{ property.type }}{% if not property.required %}?{% endif %}
{% endfor %}

    // MARK: - Initializers

{% map spec.properties into params using property %}{{ property.name }}: {{ property.type }}{% if not property.required %}?{% endif %}{% endmap %}
    public init({{ params|join:", " }}) {
{% for property in spec.properties %}
        self.{{ property.name }} = {{ property.name }}
{% endfor %}
    }

    public init(unboxer: Unboxer) throws {
{% for property in spec.properties %}
{% if property.format == "date" %}
        self.{{ property.name }} = {% if property.required %}try{% endif %} unboxer.unbox(key: "{{ property.key }}", formatter: Date.serverDateFormatter())
{% else %}
        self.{{ property.name }} = {% if property.required %}try{% endif %} unboxer.unbox(key: "{{ property.key }}")
{% endif %}
{% endfor %}
    }
}

// MARK: - Equatable

public func == (lhs: {{spec.title}}, rhs: {{spec.title}}) -> Bool {
{% for property in spec.properties %}
    guard lhs.{{property.name}} == rhs.{{property.name}} else { return false }
{% endfor %}
    return true
}
