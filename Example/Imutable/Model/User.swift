//
//  User.swift
//  ModelGen
//
//  Generated by [ModelGen]: https://github.com/hebertialmeida/ModelGen
//  Copyright Â© 2019 ModelGen. All rights reserved.
//

import Unbox

/// Definition of a User
public struct User: Equatable {

    // MARK: Instance Variables

    public let email: String
    public let id: Int
    public let timezone: String?
    public let companies: [Company]
    public let fullName: String
    public let createdAt: Date
    public let avatar: Avatar
    public let currentCompanyId: Int

    // MARK: - Initializers

    public init(email: String, id: Int, timezone: String?, companies: [Company], fullName: String, createdAt: Date, avatar: Avatar, currentCompanyId: Int) {
        self.email = email
        self.id = id
        self.timezone = timezone
        self.companies = companies
        self.fullName = fullName
        self.createdAt = createdAt
        self.avatar = avatar
        self.currentCompanyId = currentCompanyId
    }

    public init(unboxer: Unboxer) throws {
        self.email = try unboxer.unbox(key: "email")
        self.id = try unboxer.unbox(key: "id")
        self.timezone =  unboxer.unbox(key: "timezone")
        self.companies = try unboxer.unbox(key: "companies")
        self.fullName = try unboxer.unbox(key: "full_name")
        self.createdAt = try unboxer.unbox(key: "created_at", formatter: Date.serverDateFormatter())
        self.avatar = try unboxer.unbox(key: "avatar")
        self.currentCompanyId = try unboxer.unbox(key: "current_company_id")
    }

    // MARK: - Builder

    public struct Builder {
        public var email: String
        public var id: Int
        public var timezone: String?
        public var companies: [Company]
        public var fullName: String
        public var createdAt: Date
        public var avatar: Avatar
        public var currentCompanyId: Int

        public init(copy: User) {
            email = copy.email
            id = copy.id
            timezone = copy.timezone
            companies = copy.companies
            fullName = copy.fullName
            createdAt = copy.createdAt
            avatar = copy.avatar
            currentCompanyId = copy.currentCompanyId
        }

        public func build() -> User {
            return User(email: email, id: id, timezone: timezone, companies: companies, fullName: fullName, createdAt: createdAt, avatar: avatar, currentCompanyId: currentCompanyId)
        }
    }
}

// MARK: - Equatable

public func == (lhs: User, rhs: User) -> Bool {
    guard lhs.email == rhs.email else { return false }
    guard lhs.id == rhs.id else { return false }
    guard lhs.timezone == rhs.timezone else { return false }
    guard lhs.companies == rhs.companies else { return false }
    guard lhs.fullName == rhs.fullName else { return false }
    guard lhs.createdAt == rhs.createdAt else { return false }
    guard lhs.avatar == rhs.avatar else { return false }
    guard lhs.currentCompanyId == rhs.currentCompanyId else { return false }
    return true
}
